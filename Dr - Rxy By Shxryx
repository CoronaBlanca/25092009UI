-- DrRayElerium_Delta_Android.lua
-- Dr-Ray minimal UI + Elerium-style API
-- Compatible Delta Android. Estilo: morado neón oscuro + negro. Animaciones incluidas.

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = (gethui and gethui()) or game:GetService("CoreGui")

local library = {}
library.__index = library

-- Default style (morado neón oscuro + negro)
local DEFAULTS = {
    main_color = Color3.fromRGB(120, 0, 200), -- morado neon
    panel_color = Color3.fromRGB(18, 10, 25), -- negro/oscuro
    accent = Color3.fromRGB(180, 0, 255),
    text = Color3.fromRGB(255,255,255),
    min_size = Vector2.new(400,300),
    can_resize = false,
    animations = true,
    title_text = "Dr-Ray Elerium V2"
}

-- safe Instance constructor
local function new(class, props)
    local ok, inst = pcall(function() return Instance.new(class) end)
    if not ok then return nil end
    if props and type(props) == "table" then
        for k,v in pairs(props) do
            pcall(function() inst[k] = v end)
        end
    end
    return inst
end

local function tween(inst, props, time)
    if not DEFAULTS.animations then
        for k,v in pairs(props) do pcall(function() inst[k] = v end) end
        return
    end
    pcall(function()
        local ts = game:GetService("TweenService")
        local info = TweenInfo.new(time or 0.18, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        ts:Create(inst, info, props):Play()
    end)
end

-- Create base Dr-Ray minimal GUI
local function create_base_gui(opts)
    local opts = opts or {}
    local style = {
        MAIN = opts.main_color or DEFAULTS.main_color,
        PANEL = opts.panel_color or DEFAULTS.panel_color,
        ACCENT = opts.accent or DEFAULTS.accent,
        TEXT = opts.text or DEFAULTS.text,
        TITLE = opts.title_text or DEFAULTS.title_text
    }

    -- remove existing
    local existing = CoreGui:FindFirstChild("DrRayElerium")
    if existing then pcall(function() existing:Destroy() end) end

    local gui = new("ScreenGui", {Name = "DrRayElerium", ZIndexBehavior = Enum.ZIndexBehavior.Sibling})
    gui.Parent = CoreGui

    -- TopBar
    local top = new("Frame", {
        Name = "TopBar",
        Parent = gui,
        BackgroundColor3 = style.MAIN,
        BorderSizePixel = 0,
        Size = UDim2.new(0.55,0,0.17,0),
        Position = UDim2.new(0.23,0,-0.19,0)
    })
    new("UICorner", {Parent = top, CornerRadius = UDim.new(0.1,0)})
    new("UIGradient", {Parent = top, Rotation = 90}).Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(70,0,120)), ColorSequenceKeypoint.new(1, Color3.fromRGB(140,0,220))}

    -- Profile area
    local profile = new("ImageButton", {Parent = top, Name="Profile", BackgroundColor3 = style.MAIN, AutoButtonColor=false, Size=UDim2.new(0.235,0,0.68,0), Position=UDim2.new(0.015,0,0.18,0)})
    new("UICorner", {Parent = profile, CornerRadius = UDim.new(0.3,0)})
    local avatar = new("ImageLabel", {Parent=profile, Size=UDim2.new(0.166,0,0.80,0), Position=UDim2.new(0.038,0,0.142,0), BackgroundTransparency = 1})
    new("UICorner", {Parent = avatar, CornerRadius = UDim.new(100,0)})
    local nameLabel = new("TextLabel", {Parent=profile, Text = style.TITLE, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, TextColor3 = style.TEXT, Size = UDim2.new(0.72,0,0.42,0), Position = UDim2.new(0.239,0,0.273,0), Font = Enum.Font.SourceSansBold, TextSize = 14})

    -- Close decorative
    local closeBtn = new("TextButton", {Parent = top, Name="Close", BackgroundColor3 = style.MAIN, AutoButtonColor=false, BorderSizePixel=0, Size=UDim2.new(0.084,0,0.48,0), Position=UDim2.new(0.916,0,0.5197,0), Text=""})
    new("UICorner", {Parent = closeBtn, CornerRadius = UDim.new(0.2,0)})
    local closeImg = new("ImageLabel", {Parent = closeBtn, Image = "rbxassetid://14122651741", BackgroundTransparency = 1, Size = UDim2.new(0.508,0,0.597,0), Position = UDim2.new(0.246,0,0.233,0)})

    -- MainBar (logo)
    local main = new("Frame", {Parent = gui, Name="MainBar", BackgroundColor3 = style.MAIN, Size = UDim2.new(0.55,0,0.575,0), Position = UDim2.new(0.23,0,-0.612,0), BorderSizePixel = 0})
    new("UICorner", {Parent = main, CornerRadius = UDim.new(0.03,0)})
    new("UIGradient", {Parent = main, Rotation=90}).Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(20,0,30)), ColorSequenceKeypoint.new(1, Color3.fromRGB(70,0,110))}
    local logo = new("ImageLabel", {Parent = main, Name = "Logo", BackgroundTransparency = 1, Image = "rbxassetid://14133403065", Size = UDim2.new(0.187,0,0.325,0), Position = UDim2.new(0.399,0,0.334,0)})
    new("UIGradient", {Parent = logo, Rotation=90}).Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(5,6,23))}

    -- Container where windows will appear (hidden by default except the created window)
    local container = new("Frame", {Parent = gui, Name = "Container", BackgroundTransparency = 1, Size = UDim2.new(1,0,1,0)})
    return {
        Gui = gui,
        Top = top,
        Main = main,
        Container = container,
        NameLabel = nameLabel
    }, style
end

-- Prefabs (basic components adapted from Elerium)
local Prefabs = {}

function Prefabs.WindowTemplate(title, style)
    local frame = new("ImageLabel", {Name = "Window", BackgroundTransparency = 1, Image = "rbxassetid://2851926732", ImageColor3 = style.PANEL, ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(12,12,12,12), Size = UDim2.new(0,420,0,300)})
    local bar = new("Frame", {Parent = frame, Name = "Bar", BackgroundColor3 = style.MAIN, Size = UDim2.new(1,0,0,28), Position = UDim2.new(0,0,0,2)})
    new("UICorner", {Parent = frame, CornerRadius = UDim.new(0.03,0)})
    local titleLbl = new("TextLabel", {Parent = frame, Name="Title", Text = title or "Window", BackgroundTransparency = 1, Position = UDim2.new(0,12,0,4), Size = UDim2.new(0,200,0,20), Font = Enum.Font.SourceSansBold, TextColor3 = style.TEXT, TextSize=16, TextXAlignment = Enum.TextXAlignment.Left})
    local content = new("Frame", {Parent = frame, Name = "Content", BackgroundTransparency = 1, Size = UDim2.new(1,-20,1,-48), Position = UDim2.new(0,10,0,36)})
    return frame, content
end

function Prefabs.FolderTemplate(name, style)
    local folder = new("ImageLabel", {Name="Folder", BackgroundTransparency=0, Image="rbxassetid://2851929490", ImageColor3=style.MAIN, ScaleType=Enum.ScaleType.Slice, SliceCenter=Rect.new(4,4,4,4), Size=UDim2.new(1,0,0,24)})
    local btn = new("TextButton", {Parent = folder, Name = "Btn", Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1, Text = "   "..(name or "Folder"), Font = Enum.Font.SourceSans, TextSize=15, TextXAlignment = Enum.TextXAlignment.Left, TextColor3 = style.TEXT})
    local icon = new("ImageLabel", {Parent = btn, Name = "Icon", Size = UDim2.new(0,16,0,16), Position = UDim2.new(0.93,0,0.17,0), BackgroundTransparency = 1, Image = "rbxassetid://4744658743"})
    local objects = new("Frame", {Parent = folder, Name = "Objects", BackgroundTransparency = 1, Size = UDim2.new(1,0,0,0), Position = UDim2.new(0,0,1,0), ClipsDescendants = true})
    local layout = new("UIListLayout", {Parent = objects}); layout.SortOrder = Enum.SortOrder.LayoutOrder; layout.Padding = UDim.new(0,4)
    return folder, objects, btn
end

function Prefabs.ButtonTemplate(text, style)
    local img = new("ImageLabel", {Name="Button", Image="rbxassetid://2851929490", ImageColor3 = style.MAIN, ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(4,4,4,4), Size = UDim2.new(1,0,0,24)})
    local btn = new("TextButton", {Parent = img, Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1, Text = "   "..(text or "Button"), Font = Enum.Font.SourceSans, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, TextColor3 = style.TEXT})
    return img, btn
end

function Prefabs.SwitchTemplate(text, style)
    local cont = new("ImageLabel", {Name="Toggle", Image="rbxassetid://2851929490", ImageColor3 = style.MAIN, ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(4,4,4,4), Size = UDim2.new(1,0,0,24)})
    local label = new("TextLabel", {Parent = cont, Size = UDim2.new(1,-40,1,0), BackgroundTransparency = 1, Text = "   "..(text or "Switch"), Font = Enum.Font.SourceSans, TextSize = 15, TextColor3 = style.TEXT, TextXAlignment = Enum.TextXAlignment.Left})
    local box = new("ImageLabel", {Parent = cont, Name = "Box", Size = UDim2.new(0,26,0,16), Position = UDim2.new(1,-34,0.5,-8), BackgroundTransparency = 1, Image="rbxassetid://2851929490", ImageColor3 = Color3.fromRGB(50,50,50)})
    local knob = new("Frame", {Parent = box, Size = UDim2.new(0,10,0,10), Position = UDim2.new(0,3,0,3), BackgroundColor3 = Color3.fromRGB(220,220,220)})
    new("UICorner", {Parent = knob, CornerRadius = UDim.new(1,0)})
    return cont, box, knob
end

function Prefabs.DropdownTemplate(name, style)
    local dd = new("TextButton", {Name="Dropdown", Size = UDim2.new(1,0,0,24), BackgroundTransparency = 1, Text = "   "..(name or "Dropdown"), Font = Enum.Font.SourceSans, TextSize = 15, TextColor3 = style.TEXT, TextXAlignment = Enum.TextXAlignment.Left})
    local arrow = new("ImageLabel", {Parent = dd, Name="Arrow", Size = UDim2.new(0,16,0,16), Position = UDim2.new(0.93,0,0.17,0), BackgroundTransparency = 1, Image = "rbxassetid://4744658743"})
    local box = new("ImageLabel", {Parent = dd, Name="Box", Image="rbxassetid://2851929490", ImageColor3 = Color3.fromRGB(20,20,25), ScaleType=Enum.ScaleType.Slice, SliceCenter=Rect.new(4,4,4,4), Size = UDim2.new(1,0,0,0), Position = UDim2.new(0,0,0,25), ClipsDescendants = true})
    local items = new("Frame", {Parent = box, Name = "Items", BackgroundTransparency = 1, Size = UDim2.new(1,0,1,0)})
    new("UIListLayout", {Parent = items}).SortOrder = Enum.SortOrder.LayoutOrder
    return dd, box, items
end

function Prefabs.SliderTemplate(name, style)
    local slider = new("Frame", {Name="Slider", Size = UDim2.new(1,0,0,28), BackgroundTransparency = 1})
    local label = new("TextLabel", {Parent=slider, Text = name or "Slider", BackgroundTransparency=1, Font=Enum.Font.SourceSans, TextSize=15, TextColor3 = style.TEXT, TextXAlignment = Enum.TextXAlignment.Left, Size = UDim2.new(0.8,0,1,0)})
    local value = new("TextLabel", {Parent=slider, Text = "0", BackgroundTransparency=1, Font=Enum.Font.SourceSans, TextSize=15, TextColor3 = style.TEXT, Size = UDim2.new(0.2,0,1,0), Position = UDim2.new(0.8,0,0,0)})
    local bar = new("Frame", {Parent = slider, Size = UDim2.new(1,0,0,6), Position = UDim2.new(0,0,1,-10), BackgroundColor3 = Color3.fromRGB(70,70,70)})
    new("UICorner", {Parent = bar, CornerRadius = UDim.new(1,0)})
    local knob = new("Frame", {Parent = bar, Size = UDim2.new(0,6,1,0), Position = UDim2.new(0,0,0,0), BackgroundColor3 = Color3.fromRGB(200,200,200)})
    new("UICorner", {Parent = knob, CornerRadius = UDim.new(1,0)})
    return slider, bar, knob, value
end

function Prefabs.TextboxTemplate(placeholder, style)
    local tb = new("TextBox", {Size = UDim2.new(1,0,0,24), Font = Enum.Font.SourceSans, TextSize = 15, PlaceholderText = placeholder or "Input...", ClearTextOnFocus = false, BackgroundTransparency = 1, TextColor3 = style.TEXT})
    return tb
end

-- Window / Tab / Folder engine
local WindowClass = {}
WindowClass.__index = WindowClass

function WindowClass:AddTab(name)
    local tab = setmetatable({Name = name, Folders = {}, UI = {}}, {__index = function(t,k) return nil end})
    -- create container frame inside Content
    local page = new("Frame", {Parent = self.Content, Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1})
    local layout = new("UIListLayout", {Parent = page}); layout.SortOrder = Enum.SortOrder.LayoutOrder; layout.Padding = UDim.new(0,8)
    tab.Page = page

    function tab:AddFolder(title)
        local folderTemplate, objects, btn = Prefabs.FolderTemplate(title, self.Style)
        folderTemplate.Parent = page
        local items = objects
        local expanded = false
        -- update size
        local function update()
            if expanded then
                items.Size = UDim2.new(1,0,0, items.UIListLayout and items.UIListLayout.AbsoluteContentSize.Y + 8 or 0)
                btn.Icon.Rotation = 90
            else
                items.Size = UDim2.new(1,0,0,0)
                btn.Icon.Rotation = 0
            end
        end

        -- ensure UIListLayout reference inside objects
        local uil = items:FindFirstChildOfClass("UIListLayout")
        if not uil then uil = new("UIListLayout", {Parent = items}); uil.SortOrder = Enum.SortOrder.LayoutOrder; uil.Padding = UDim.new(0,4) end
        items.UIListLayout = uil

        btn.MouseButton1Click:Connect(function()
            expanded = not expanded
            update()
        end)

        local folder = {}
        function folder:AddButton(text, callback)
            local img, btnObj = Prefabs.ButtonTemplate(text, self)
            img.Parent = items
            btnObj.MouseButton1Click:Connect(function()
                pcall(callback)
            end)
            return img
        end
        function folder:AddSwitch(text, callback, default)
            local cont, box, knob = Prefabs.SwitchTemplate(text, self)
            cont.Parent = items
            local state = (default == true)
            local function setState(v)
                state = not not v
                if state then
                    tween(knob, {Position = UDim2.new(0, box.AbsoluteSize.X - 12, 0, 3)}, 0.12)
                else
                    tween(knob, {Position = UDim2.new(0,3,0,3)}, 0.12)
                end
                pcall(callback, state)
            end
            cont.InputBegan:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then setState(not state) end
            end)
            -- init
            spawn(function() wait(0.02); setState(state) end)
            return cont
        end
        function folder:AddDropdown(text, itemsTable, callback)
            local dd, box, itemsHolder = Prefabs.DropdownTemplate(text, self)
            dd.Parent = items
            local open = false
            local function rebuild()
                for i,v in pairs(itemsHolder:GetChildren()) do if not v:IsA("UIListLayout") then v:Destroy() end end
                for i,v in ipairs(itemsTable or {}) do
                    local it = new("TextButton", {Parent = itemsHolder, Size = UDim2.new(1,0,0,24), BackgroundTransparency = 1, Text = "   "..tostring(v), Font = Enum.Font.SourceSans, TextColor3 = self.Style.TEXT, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left})
                    it.MouseButton1Click:Connect(function()
                        dd.Text = "   "..tostring(v)
                        pcall(callback, v)
                        open = false
                        tween(box, {Size = UDim2.new(1,0,0,0)}, 0.12)
                    end)
                end
            end
            dd.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    rebuild()
                    local size = math.min(#(itemsTable or {}) * 24, 6 * 24)
                    tween(box, {Size = UDim2.new(1,0,0,size)}, 0.14)
                else
                    tween(box, {Size = UDim2.new(1,0,0,0)}, 0.12)
                end
            end)
            return dd
        end
        function folder:AddSlider(title, min, max, start, callback)
            local sl, bar, knob, valueLbl = Prefabs.SliderTemplate(title, self)
            sl.Parent = items
            local mmin, mmax = min or 0, max or 100
            local val = start or mmin
            local dragging = false
            local function setVal(v)
                val = math.clamp(v, mmin, mmax)
                local percent = (val - mmin) / math.max(1, (mmax - mmin))
                if knob then
                    knob.Size = UDim2.new(math.clamp(percent,0,1),0,1,0)
                end
                if valueLbl then valueLbl.Text = tostring(math.floor(val)) end
                pcall(callback, val)
            end
            sl.InputBegan:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    local conn
                    conn = RunService.RenderStepped:Connect(function()
                        if not dragging then conn:Disconnect() return end
                        local ms = Players.LocalPlayer and Players.LocalPlayer:GetMouse()
                        if ms then
                            local abs = ms.X - sl.AbsolutePosition.X
                            local pct = abs / sl.AbsoluteSize.X
                            setVal(mmin + pct * (mmax - mmin))
                        end
                    end)
                    local up
                    up = UserInputService.InputEnded:Connect(function(i)
                        if i.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false; up:Disconnect() end
                    end)
                end
            end)
            setVal(val)
            return sl
        end
        function folder:AddTextbox(placeholder, callback)
            local tb = Prefabs.TextboxTemplate(placeholder, self)
            tb.Parent = items
            tb.FocusLost:Connect(function(enter)
                if enter then pcall(callback, tb.Text) end
            end)
            return tb
        end

        table.insert(tab.Folders, folder)
        return folder
    end

    table.insert(self.Tabs, tab)
    return tab
end

-- Window creation function
function library:AddWindow(title, options)
    local opts = options or {}
    for k,v in pairs(DEFAULTS) do if opts[k] == nil then opts[k] = v end end
    DEFAULTS.animations = opts.animations ~= false
    local base, style = create_base_gui(opts)
    -- override colors from opts
    style.MAIN = opts.main_color or style.MAIN
    style.PANEL = opts.panel_color or style.PANEL
    style.ACCENT = opts.accent or style.ACCENT
    style.TEXT = opts.text or style.TEXT
    base.NameLabel.Text = opts.title_text or style.TITLE

    local windowTemplate, content = Prefabs.WindowTemplate(title or "Window", {MAIN = style.MAIN, PANEL = style.PANEL, TEXT = style.TEXT})
    windowTemplate.Parent = base.Container
    windowTemplate.AnchorPoint = Vector2.new(0.5,0.5)
    windowTemplate.Position = UDim2.new(0.5,0,0.5,0)
    windowTemplate.Active = true

    local win = setmetatable({
        Frame = windowTemplate,
        Content = content,
        Base = base,
        Tabs = {},
        Style = {MAIN=style.MAIN, PANEL=style.PANEL, TEXT=style.TEXT}
    }, WindowClass)

    -- expose AddTab on window
    function win:AddTab(name)
        local tab = WindowClass.AddTab(win, name)
        return tab
    end

    -- close button destroys GUI
    base.Top:FindFirstChild("Close").MouseButton1Click:Connect(function()
        pcall(function() base.Gui:Destroy() end)
    end)

    return win
end

-- allow call as function
setmetatable(library, {__call = function() return library end})
return library
